@page "/dashboard"
@using System.Diagnostics
@using System.Runtime.InteropServices
@using ServerPanel.Core
@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>



<div class="bg-gradient-to-br from-gray-900 to-gray-800 text-white p-6 min-h-screen w-full">
    <h1 class="text-4xl font-bold text-center mb-6">@Globals.panel_title</h1>
    <div class="grid md:grid-cols-2 gap-6">
        <div class="glass p-6">
            <div class="bg-info text-white text-lg font-bold p-3 rounded-t-lg">System Information</div>
            <div class="p-4">
                <p><strong>OS:</strong> @operating_system</p>
                <p><strong>CPU:</strong> @cpu_model</p>
                <p><strong>Cores:</strong> @cpu_cores</p>
                <p><strong>Threads:</strong> @cpu_threads</p>
                <p><strong>CPU Speed:</strong> @cpu_max_boost_freq</p>
                <p><strong>Total RAM:</strong> @ram_total</p>
                <p><strong>System Uptime:</strong> @system_uptime</p>
            </div>
        </div>

        <div class="glass p-6">
            <div class="bg-success text-white text-lg font-bold p-3 rounded-t-lg">Network Information</div>
            <div class="p-4">
                <p><strong>IPv4:</strong> @localIp</p>
            </div>
        </div>
    </div>

    <h3 class="text-2xl font-semibold mt-8 mb-4">Virtual Machines - QEMU</h3>
    <div class="grid md:grid-cols-3 gap-6">
        @foreach (var vm in virtualMachines) {
            <div class="glass p-6 transition hover:scale-105">
                <div class="p-3 rounded-t-lg text-lg font-bold text-white"
                     style="background-color: @(vm.state == power_state.on ? "#16a34a" : "#dc2626");">
                    @vm.name
                </div>
                <div class="p-4">
                    <p><strong>OS:</strong> @vm.os</p>
                    <p class="text-gray-300">CPU(s): @vm.VCpuCount</p>
                    <p class="text-gray-300">Max Memory: @vm.MaxMemory MB</p>
                    <p class="text-gray-300">Autostart: @vm.autostart</p>
                    <div class="flex justify-between mt-4">
                        <button class="btn btn-success" @onclick="() => TurnOnVm(vm)">Start</button>
                        <button class="btn btn-error" @onclick="() => TurnOffVm(vm)">Shutdown</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>






@code {
    private string localIp = "loading...";
    private string operating_system = "loading...";
    private string cpu_model = "loading...";
    private string cpu_cores = "loading...";
    private string cpu_threads = "loading...";
    private string cpu_max_boost_freq = "loading...";
    private string ram_total = "loading...";
    private string system_uptime = "loading...";
    private bool _isRunning = true;

    private List<VirtualMachine> virtualMachines = new List<VirtualMachine>();

    protected override async Task OnInitializedAsync()
    {
        await GetLocalIp();
        await GetSystemInfo();
        await getVMs();
    }
    


    
    
    private Task TurnOnVm(VirtualMachine vm)
    {
        Console.WriteLine("turning on " + vm.name);
        //vm.state = power_state.on;
        vm.turnOn();
        StateHasChanged();
        return Task.CompletedTask;
    }
    

    private Task TurnOffVm(VirtualMachine vm)
    {
        Console.WriteLine("shutting down " + vm.name);
        //vm.state = power_state.off;
        vm.turnOff();
        StateHasChanged(); 
        return Task.CompletedTask;
    }

    
    private async Task getVMs()
    {
        virtualMachines = Globals.globalVms;
    }
    
    private async Task GetSystemInfo()
    {
        try
        {
            operating_system = await RunBashCommand("LANG=C cat /etc/os-release | grep -w 'PRETTY_NAME' | cut -d '=' -f2");

            cpu_model = await RunBashCommand("LANG=C lscpu | grep 'Model name' | cut -d ':' -f2 | sed 's/^ //g'");

            string cpuFreqResult = await RunBashCommand("LANG=C lscpu | grep 'CPU max MHz' | cut -d ':' -f2 | sed 's/^ //g'");
            cpu_max_boost_freq = FixCpuFrequencyFormatting(cpuFreqResult);

            string ramResult = await RunBashCommand("LANG=C free -h | grep Mem | awk '{print $2}'");
            ram_total = FormatRam(ramResult);
            
            system_uptime = await RunBashCommand("LANG=C uptime -p | sed 's/up //g'");
            cpu_cores = await RunBashCommand("LANG=C lscpu | grep '^Core(s) per socket:' | awk '{print $4}'");
            cpu_threads = await RunBashCommand("LANG=C lscpu | grep '^CPU(s):' | awk '{print $2}'");
            
            
            
        }
        catch (Exception ex)
        {
            operating_system = "Failed to retrieve OS: " + ex.Message;
            cpu_model = "Failed to retrieve CPU model: " + ex.Message;
            cpu_max_boost_freq = "Failed to retrieve CPU frequency: " + ex.Message;
            ram_total = "Failed to retrieve RAM: " + ex.Message;
        }
    }
    

    private string FixCpuFrequencyFormatting(string mhz)
    {
        string cpu_freq = "";
        try
        {
            cpu_freq = Math.Round(Convert.ToDouble(mhz) / 10000000, 2) + " GHz";
        }
        catch (Exception ex)
        {
            cpu_freq = "Failed to retrieve CPU Clock";
        }

        return cpu_freq;
    }

    private string FormatRam(string ramValue)
    {
        if (ramValue.Contains("Gi"))
        {
            // If the value contains 'Gi', we can keep it as is or convert it
            return ramValue.Replace("Gi", "GB");
        }
        return ramValue;
    }


    private async Task GetLocalIp()
    {
        try
        {
            // Check if the current environment is compatible with executing the command
            if (IsServerEnvironment())
            {
                // Run the ip command to get the local IP address of the server
                string commandOutput = await RunBashCommand("ip -4 addr show | grep inet | grep -v 127.0.0.1 | awk '{print $2}' | cut -d/ -f1");

                // Process the result to handle multiple IPs and join them with commas
                var ipList = commandOutput.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                localIp = string.Join(", ", ipList);
            }
            else
            {
                localIp = "Not supported in WebAssembly environment.";
            }
        }
        catch (Exception ex)
        {
            localIp = "Failed to retrieve IP: " + ex.Message;
        }
    }
    
    private bool IsServerEnvironment()
    {
        // This is a simple check to ensure the code only runs in Blazor Server (not WebAssembly)
        return !RuntimeInformation.IsOSPlatform(OSPlatform.Create("WEBASSEMBLY"));
    }

    private async Task<string> RunBashCommand(string command)
    {
        var startInfo = new ProcessStartInfo
        {
            FileName = "/bin/bash", // Use bash shell
            Arguments = $"-c \"{command}\"", // Execute the command passed
            RedirectStandardOutput = true, // Capture the command's output
            UseShellExecute = false, // Do not use shell for executing commands
            CreateNoWindow = true // Do not create a window for the process
        };

        using (var process = Process.Start(startInfo)) // Start the process to execute the command
        using (var reader = process.StandardOutput) // Read the output from the command
        {
            return await reader.ReadToEndAsync(); // Return the output (IP address)
        }
    }

    private async Task RefreshIp()
    {
        // Refresh the IP by calling the method again
        await GetLocalIp();
    }
}